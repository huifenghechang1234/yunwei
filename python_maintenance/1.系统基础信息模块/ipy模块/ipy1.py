"""
title = ''
author = 'huifenghechang'
mtime = '2023/12/10'
code is far away from bugs with the god animal protecting
I love animals. They taste delicious.
┏┓      ┏┓
┏┛┻━━━┛┻┓
┃      ☃      ┃
┃  ┳┛  ┗┳  ┃
┃      ┻      ┃
┗━┓      ┏━┛
┃      ┗━━━┓
┃  神兽保佑    ┣┓
┃　永无BUG！   ┏┛
┗┓┓┏━┳┓┏┛
┃┫┫  ┃┫┫
┗┻┛  ┗┻┛
"""
"""
IPy模块介绍
IPy这个强大的Python第三方包主要提供了包括网段、网络掩码、广播地址、子网数、IP类型的处理等等功能
"""
from IPy import IP  # 导入模块

print("--------------------1---------------------------------")
# IPy模块包含IP类，使用它可以方便处理绝大部分格式为IPv6及IPv4的网络和地址，
# 比如通过version方法就可以区分出IPv4和IPv6
print(IP("10.0.0.0/8").version())    # 4
print(IP("::1").version())  # 6
print("----------------------1-------------------------------")


print("-----------------------2------------------------------")
# 通过指定的网断输出该网段的IP个数及所有IP地址清单
ip = IP("192.168.0.0/24")
print(ip.len()) 	# 输出192.168.0.0/16网段的IP个数   256
for i in ip:	 # 输出192.168.0.0/16网段的所有IP清单
    print(i)

# 对IP地址段按索引进行获取具体IP地址
print(str(ip[2]))   # 192.168.0.2
print(str(ip[-1]))   # 192.168.255.255
print("------------------------2-----------------------------")


print("-------------------------3----------------------------")
#  IP类几个常见的方法，包括反向解析名称、IP类型、IP转换等
ip1 = IP("36.152.44.95")
print("36.152.44.95的反向解析地址格式 ", ip1.reverseName())	 # 反向解析地址格式    95.44.152.36.in-addr.arpa.

# 判定ip地址类型
print("36.152.44.95的ip类型", ip1.iptype())	      # 192.168.1.20为私网类型'PRIVATE'    'PRIVATE'
print("ip类型", IP('8.8.8.8').iptype())    # 8.8.8.8为公网类型    'PUBLIC'
print("IP地址类型", IP('127.0.0.1').iptype())   # 回环地址  LOOPBACK
print(IP('2001:0658:022a:cafe:0200::1').iptype())    # ALLOCATED RIPE NCC

# 进制转换
print("转换成整型格式  ", IP("8.8.8.8").int())   	    # 转换成整型格式      134744072
print("转换成十六进制格式 ", IP("8.8.8.8").strHex()) 	# 转换成十六进制格式   '0x8080808'
print("转换成二进制格式", IP("8.8.8.8").strBin())	 # 转换成二进制格式    '00001000000010000000100000001000'
print("十六进制转成IP格式 ", IP(0x8080808))	  # 十六进制转成IP格式    8.8.8.8
print("IP地址十进制显示", "%X" % IP('10.10.10.10').int())   # A0A0A0A

# 获取IP地址十进制格式的字符串表示形式
print("获取IP地址127.0.0.1十进制格式的字符串表示形式", IP('127.0.0.1').strDec())
print("获取IP地址2001:0658:022a:cafe:0200::1十进制格式的字符串表示形式", IP('2001:0658:022a:cafe:0200::1').strDec())

# 获取IP地址的16进制字符串表示形式
print("获取IP地址的16进制字符串表示形式", IP('127.0.0.1').strHex())    # 0x7f000001
print("获取IP地址的16进制字符串表示形式", IP('2001:0658:022a:cafe:0200::1').strHex())    # 0x20010658022acafe0200000000000001
print("--------------------------3---------------------------")


print("--------------------------4---------------------------")
# IP方法也支持网络地址的转换，例如根据IP与掩码生产网段格式
# 采用三种书写方式
print(IP('192.168.1.0').make_net('255.255.255.0'))   # 192.168.1.0/24
print(IP('192.168.1.0/255.255.255.0', make_net=True))    # 192.168.1.0/24
print(IP('192.168.1.0-192.168.1.255', make_net=True))  # 192.168.1.0/24
print("---------------------------4--------------------------")


print("--------------------------5---------------------------")
# 对IP地址段转换显示形式
print(IP('10.0.0.0/8').broadcast())   # 10.255.255.255

# 获取网络地址和掩码
print(IP('10.0.0.0/8').net())   # 10.0.0.0
print(IP('10.0.0.0/8').netmask())   # 255.0.0.0
print("--------------------------5---------------------------")


print("-------------------------6----------------------------")
# strNormal方法
"""
wantprefixlen的取值及含义：
wantprefixlen=0,无返回，如192.168.1.0；
wantprefixlen=1,prefix格式，如192.168.1.0/24；
wantprefixlen=2,decimalnetmask格式，如192.168.1.0/255.255.255.0;
wantprefixlen=3,lastIP格式，如：192.168.1.0-192.168.1.255
"""
# 通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。输出类型为字符串，如下：
print(IP('192.168.1.0/24').strNormal(0))  # '192.168.1.0'
print(IP('192.168.1.0/24').strNormal(1))   # '192.168.1.0/24'
print(IP('192.168.1.0/24').strNormal(2))  # '192.168.1.0/255.255.255.0'
print(IP('192.168.1.0/24').strNormal(3))    #  192.168.1.0-192.168.1.255
print("---------------------------6--------------------------")


# 多网络计算方法
print("------------------------------7-----------------------")
# 比较IP地址的大小，需要注意的是ipv4的地址是永远小于ipv6地址的
print(IP('10.0.0.0') < IP('2001:db8::'))
print(IP('10.0.0.0/24') < IP('12.0.0.0/24'))   # True
print(IP('10.0.1.0/24') > IP('10.0.0.0'))
print(IP('10.0.0.0/24') > IP('10.0.0.1'))

# 判断IP地址和网段是否包含于另一个网段中，如下：
print('192.168.1.100' in IP("192.168.1.0/24"))   # True
print(IP('192.168.1.0/24') in IP('192.168.0.0/16'))  # True

# 判断两个网段是否存在于重叠，采用IPy提供的overlaps方法，如：
print(IP('192.168.0.0/23').overlaps('192.168.1.0/24'))  # 1	#返回1代表重叠
print(IP('192.168.1.0/24').overlaps('192.168.2.0'))  # 0	#返回0代表不重叠
print("-----------------------------7------------------------")


print("-----------------------------8------------------------")
# 用IP地址或地址段hash
print(IP('10.0.0.0/24').__hash__())

# IP地址或者地址段的输出print，支持丰富的显示形式
print("输出ip地址", IP('127.0.0.0/8'))   # 127.0.0.0/8
print("输出ip地址", IP('127.0.0.0/255.0.0.0'))  # 127.0.0.0/8
print("输出ip地址", IP('127.0.0.0-127.255.255.255'))   # 127.0.0.0/8
print("输出ip地址", IP('127.0.0.1/255.0.0.0', make_net=True))   # 127.0.0.0/8

# IP网段包含的IP地址个数
print("IP网段包含的IP地址个数", IP('195.185.1.0/28').len())   # 16
print("IP网段包含的IP地址个数", IP('195.185.1.0/24').len())   # 256

# 获取掩码的长度
print("获取掩码的长度", IP('10.0.0.0/8').prefixlen())

# 获取IP地址段的掩码字符串，大部分用于IPv6
print("获取IP地址段的掩码字符串", IP('195.185.0.0/16').strNetmask())   # 255.255.0.0
print("获取IP地址段的掩码字符串", IP('2001:0658:022a:cafe::0/64').strNetmask())   # /64

# 获取IP地址的字符串表示形式
print(IP('127.0.0.1').strNormal())    # 127.0.0.1
print(IP('2001:0658:022a:cafe:0200::1').strNormal())   # 2001:658:22a:cafe:200:0:0:1

# 以字符串形式输出IP地址
IP('192.168.1.1').strNormal()      # '192.168.1.1'
print("-----------------------------8------------------------")




